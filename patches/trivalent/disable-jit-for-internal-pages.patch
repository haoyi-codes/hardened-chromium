diff --git a/chrome/browser/chrome_content_browser_client.cc b/chrome/browser/chrome_content_browser_client.cc
index e5ce608907f72..09159a4e83115 100644
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -8013,9 +8013,10 @@ bool ChromeContentBrowserClient::IsJitDisabledForSite(
                                          nullptr) == CONTENT_SETTING_BLOCK;
   }
 
-  // Only disable JIT for web schemes.
-  if (!site_url.SchemeIsHTTPOrHTTPS())
-    return false;
+  // Only force disable JIT for pages that aren't web schemes, aren't file schemes, and aren't extensions
+  if (!site_url.SchemeIsHTTPOrHTTPS() && !site_url.SchemeIsFile()
+      && !site_url.SchemeIs("chrome-extension"))
+    return true;
 
   return (map && map->GetContentSetting(site_url, site_url,
                                         ContentSettingsType::JAVASCRIPT_JIT) ==
diff --git a/content/public/common/content_features.cc b/content/public/common/content_features.cc
index 2d95d5e1df911..e7a29a6687a07 100644
--- a/content/public/common/content_features.cc
+++ b/content/public/common/content_features.cc
@@ -1067,7 +1067,7 @@ BASE_FEATURE(kDisableProcessReuse,
 // This feature is only consulted in site-per-process mode.
 BASE_FEATURE(kSpareRendererForSitePerProcess,
              "SpareRendererForSitePerProcess",
-             base::FEATURE_ENABLED_BY_DEFAULT);
+             base::FEATURE_DISABLED_BY_DEFAULT);
 
 // Controls whether site isolation should use origins instead of scheme and
 // eTLD+1.
