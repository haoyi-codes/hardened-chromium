diff --git a/chrome/browser/first_run/first_run_internal_linux.cc b/chrome/browser/first_run/first_run_internal_linux.cc
index 33fd5790123ea..a778eb4471405 100644
--- a/chrome/browser/first_run/first_run_internal_linux.cc
+++ b/chrome/browser/first_run/first_run_internal_linux.cc
@@ -20,10 +20,8 @@ bool IsOrganicFirstRun() {
 
 base::FilePath InitialPrefsPath() {
   // The standard location of the initial prefs is next to the chrome binary.
-  base::FilePath dir_exe;
-  if (!base::PathService::Get(base::DIR_EXE, &dir_exe)) {
-    return base::FilePath();
-  }
+  // ... but we want to mimic Fedora and use our own directory
+  base::FilePath dir_exe = base::FilePath("/etc/trivalent");
 
   return installer::InitialPreferences::Path(dir_exe);
 }
diff --git a/chrome/common/chrome_paths.cc b/chrome/common/chrome_paths.cc
index ec09803ffabcf..4475a3112326d 100644
--- a/chrome/common/chrome_paths.cc
+++ b/chrome/common/chrome_paths.cc
@@ -609,7 +609,7 @@ bool PathProvider(int key, base::FilePath* result) {
           FILE_PATH_LITERAL("/etc/opt/chrome/native-messaging-hosts"));
 #else
       cur = base::FilePath(
-          FILE_PATH_LITERAL("/etc/chromium/native-messaging-hosts"));
+          FILE_PATH_LITERAL("/etc/trivalent/native-messaging-hosts"));
 #endif
 #endif  // !BUILDFLAG(IS_MAC)
       break;
diff --git a/components/policy/core/common/policy_paths.cc b/components/policy/core/common/policy_paths.cc
index 7c15eeaa4f875..a1bc336139867 100644
--- a/components/policy/core/common/policy_paths.cc
+++ b/components/policy/core/common/policy_paths.cc
@@ -18,7 +18,9 @@ const char kPolicyPath[] = "/etc/opt/chrome/policies";
 #elif BUILDFLAG(GOOGLE_CHROME_FOR_TESTING_BRANDING)
 const char kPolicyPath[] = "/etc/opt/chrome_for_testing/policies";
 #else
-const char kPolicyPath[] = "/etc/chromium/policies";
+// we can try to account for policies in the main directory but that may be too dirty
+// we just want new directories
+const char kPolicyPath[] = "/etc/trivalent/policies";
 #endif  // BUILDFLAG(GOOGLE_CHROME_BRANDING)
 #endif  // BUILDFLAG(IS_POSIX) && !BUILDFLAG(IS_MAC)
 
